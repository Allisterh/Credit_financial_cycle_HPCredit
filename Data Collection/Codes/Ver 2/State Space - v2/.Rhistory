# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 1000))
# Returns paramter estimates, -LL value, code
toc()
library(tidyverse)
library(tictoc)
library(ucminf)
library(numDeriv)
# Replicates Table 3 from Morley, 2007 JMCB
#
#
rm(list = ls())
# setwd("put working directory here")
setwd("D:/GitHub/HPCredit/Data Collection/Codes/Ver 2/State Space - v2")
data_im <- read.table("D:/GitHub/HPCredit/Data Collection/MergedData-Raw.txt", header=TRUE, sep=",")
data_im = na.omit(data_im)
data_im <- data_im %>%
filter(ID=="DE")
data <- cbind(data_im$HPIndex,data_im$HHCredit)
write.table(data, "D:/GitHub/HPCredit/Data Collection/DEdata.txt", sep=",")
source("trans.R") # Parameter constraints
source("lik_fcn.R") # Negative log likelihood function
source("filter_fcn.R") # Filter function
data = na.omit(data)
y <- 100*log(data)
#setting mu_h 0|0 values, first value in the series
t_h_prior = 483
t_c_prior = 356
T <- nrow(y)
#T <-49
START <- 2
#prior <- 100
#=========================================================================#
# Maximum Likelihood Estimation
#=========================================================================#
# Initial values for optimisation routine
prmtr_in = c(0.648753,
0.965327,
0.460498,
-0.312246,
0.168139,
-0.784462,
0.812616,
0.759307,
0.635521,
-0.478544,
0.188713,
-0.954975,
-0.149481,
-0.374562,
-0.677031,
-0.642468 )
#prmtr_in = runif(16, min=-1, max=1)
prmtr_in = t(prmtr_in)
trans(prmtr_in)
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 1000))
# Returns paramter estimates, -LL value, code
toc()
prmtr = trans(prmtr_in)
phi_h11 = prmtr[1]
phi_h12 = prmtr[2]
phi_h21 = prmtr[3]
phi_h22 = prmtr[4]
phi_c11 = prmtr[5]
phi_c12 = prmtr[6]
phi_c21 = prmtr[7]
phi_c22 = prmtr[8]
mu_h = prmtr[9]
mu_c = prmtr[10]
sig_nhh = prmtr[11]^2 # s.e. of HP permanent component
sig_ncc = prmtr[12]^2 # s.e. of credit permanent component
sig_ehh = prmtr[13]^2 # s.e. of the HP AR component
sig_ecc = prmtr[14]^2 # s.e. of the credit AR component
sig_nhnc = prmtr[15]*sqrt(sig_nhh*sig_ncc)
sig_ehec = prmtr[16]*sqrt(sig_ehh*sig_ecc)
F = matrix(0,6,6) # Transition matrix
F[1,] = c(1,0,0,0,0,0)
F[2,] = c(0,phi_h11,phi_h12,0,phi_h21,phi_h22)
F[3,] = c(0,1,0,0,0,0)
F[4,] = c(0,0,0,1,0,0)
F[5,] = c(0,phi_c11,phi_c12,0,phi_c21, phi_c22)
F[6,] = c(0,0,0,0,1,0)
Fstar = F[-c(1, 4), -c(1,4)]
Fstar
source("lik_fcn.R") # Negative log likelihood function
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 1000))
# Returns paramter estimates, -LL value, code
toc()
model$hessian
solve(model$hessian)
# Returns paramter estimates, -LL value, code
# Final parameter values
prm_fnl = t(trans(model$par))
model$par
prm_fnl
# Use Hessian to find parameter standard errors
hessn0 = model$hessian
cov0 = solve(hessn0)
grdn_fnl = jacobian(trans, model$par) #trans function used here
cov = grdn_fnl%*%cov0%*%t(grdn_fnl)
sd_fnl = sqrt(abs(diag(cov)))
sd_out = sqrt(abs(diag(cov0)))
model$hessian
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 10000))
# Returns paramter estimates, -LL value, code
toc()
model$hessian
solve(model$hessian)
# Returns paramter estimates, -LL value, code
source("lik_fcn.R") # Negative log likelihood function
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 10000))
# Returns paramter estimates, -LL value, code
toc()
model$hessian
solve(model$hessian)
?ucmÃ¬n
?ucminf
model$invhessian
model$hessian
model$invhessian
model$hessian
model$invhessian
# Returns paramter estimates, -LL value, code
# Final parameter values
prm_fnl = t(trans(model$par))
model$par
prm_fnl
# Use Hessian to find parameter standard errors
hessn0 = model$hessian
cov0 = model$invhessian
grdn_fnl = jacobian(trans, model$par) #trans function used here
cov = grdn_fnl%*%cov0%*%t(grdn_fnl)
sd_fnl = sqrt(abs(diag(cov)))
sd_out = sqrt(abs(diag(cov0)))
# Create output file to store results
results = file("results.txt")
# Final Output
writeLines(c("Likelihood value is ", -model$value,
"code ", model$convergence, ":", model$message, "",
"Estimated parameters are:", c(t(prm_fnl),t(sd_fnl)), "",
"Pre-transformed estimates are:", model$par,"",
"Starting values:", prmtr_in), results)
close(results)
grdn_fnl
cov0
str(cov0)
grdn_fnl = jacobian(trans, model$par) #trans function used here
str(grdn_fnl)
model$par
prmtr_in
prmtr_in = c(0.648753,
0.965327,
0.460498,
-0.312246,
0.168139,
-0.784462,
0.812616,
0.759307,
0.635521,
-0.478544,
0.188713,
-0.954975,
-0.149481,
-0.374562,
-0.677031,
-0.642468 )
#prmtr_in = runif(16, min=-1, max=1)
prmtr_in = t(prmtr_in)
trans(prmtr_in)
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 10000))
# Returns paramter estimates, -LL value, code
toc()
warnings()
source("lik_fcn.R") # Negative log likelihood function
prmtr_in = c(0.648753,
0.965327,
0.460498,
-0.312246,
0.168139,
-0.784462,
0.812616,
0.759307,
0.635521,
-0.478544,
0.188713,
-0.954975,
-0.149481,
-0.374562,
-0.677031,
-0.642468 )
#prmtr_in = runif(16, min=-1, max=1)
prmtr_in = t(prmtr_in)
trans(prmtr_in)
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 10000))
# Returns paramter estimates, -LL value, code
toc()
model$hessian
model$invhessian
# Final parameter values
prm_fnl = t(trans(model$par))
model$par
prm_fnl
# Use Hessian to find parameter standard errors
hessn0 = model$hessian
cov0 = model$solve(hessn0)
grdn_fnl = jacobian(trans, model$par) #trans function used here
cov = grdn_fnl%*%cov0%*%t(grdn_fnl)
sd_fnl = sqrt(abs(diag(cov)))
sd_out = sqrt(abs(diag(cov0)))
# Create output file to store results
results = file("results.txt")
# Final Output
writeLines(c("Likelihood value is ", -model$value,
"code ", model$convergence, ":", model$message, "",
"Estimated parameters are:", c(t(prm_fnl),t(sd_fnl)), "",
"Pre-transformed estimates are:", model$par,"",
"Starting values:", prmtr_in), results)
close(results)
cov0 = solve(hessn0)
grdn_fnl = jacobian(trans, model$par) #trans function used here
cov = grdn_fnl%*%cov0%*%t(grdn_fnl)
sd_fnl = sqrt(abs(diag(cov)))
sd_out = sqrt(abs(diag(cov0)))
# Create output file to store results
results = file("results.txt")
# Final Output
writeLines(c("Likelihood value is ", -model$value,
"code ", model$convergence, ":", model$message, "",
"Estimated parameters are:", c(t(prm_fnl),t(sd_fnl)), "",
"Pre-transformed estimates are:", model$par,"",
"Starting values:", prmtr_in), results)
close(results)
cov0 = solve(hessn0)
grdn_fnl = jacobian(trans, model$par) #trans function used here
cov = grdn_fnl%*%cov0%*%t(grdn_fnl)
sd_fnl = sqrt(abs(diag(cov)))
sd_out = sqrt(abs(diag(cov0)))
# Create output file to store results
results = file("results.txt")
# Final Output
writeLines(c("Likelihood value is ", -model$value,
"code ", model$convergence, ":", model$message, "",
"Estimated parameters are:", c(t(prm_fnl),t(sd_fnl)), "",
"Pre-transformed estimates are:", model$par,"",
"Starting values:", prmtr_in), results)
close(results)
source("lik_fcn.R") # Negative log likelihood function
prmtr_in = c(0.648753,
0.965327,
0.460498,
-0.312246,
0.168139,
-0.784462,
0.812616,
0.759307,
0.635521,
-0.478544,
0.188713,
-0.954975,
-0.149481,
-0.374562,
-0.677031,
-0.642468 )
#prmtr_in = runif(16, min=-1, max=1)
prmtr_in = t(prmtr_in)
trans(prmtr_in)
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 10000))
# Returns paramter estimates, -LL value, code
toc()
source("lik_fcn.R") # Negative log likelihood function
prmtr_in = c(0.648753,
0.965327,
0.460498,
-0.312246,
0.168139,
-0.784462,
0.812616,
0.759307,
0.635521,
-0.478544,
0.188713,
-0.954975,
-0.149481,
-0.374562,
-0.677031,
-0.642468 )
#prmtr_in = runif(16, min=-1, max=1)
prmtr_in = t(prmtr_in)
trans(prmtr_in)
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 10000))
# Returns paramter estimates, -LL value, code
toc()
source("lik_fcn.R") # Negative log likelihood function
prmtr_in = c(0.648753,
0.965327,
0.460498,
-0.312246,
0.168139,
-0.784462,
0.812616,
0.759307,
0.635521,
-0.478544,
0.188713,
-0.954975,
-0.149481,
-0.374562,
-0.677031,
-0.642468 )
#prmtr_in = runif(16, min=-1, max=1)
prmtr_in = t(prmtr_in)
trans(prmtr_in)
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 10000))
# Returns paramter estimates, -LL value, code
toc()
source("lik_fcn.R") # Negative log likelihood function
prmtr_in = c(0.648753,
0.965327,
0.460498,
-0.312246,
0.168139,
-0.784462,
0.812616,
0.759307,
0.635521,
-0.478544,
0.188713,
-0.954975,
-0.149481,
-0.374562,
-0.677031,
-0.642468 )
#prmtr_in = runif(16, min=-1, max=1)
prmtr_in = t(prmtr_in)
trans(prmtr_in)
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 10000))
# Returns paramter estimates, -LL value, code
toc()
source("lik_fcn.R") # Negative log likelihood function
prmtr_in = c(0.648753,
0.965327,
0.460498,
-0.312246,
0.168139,
-0.784462,
0.812616,
0.759307,
0.635521,
-0.478544,
0.188713,
-0.954975,
-0.149481,
-0.374562,
-0.677031,
-0.642468 )
#prmtr_in = runif(16, min=-1, max=1)
prmtr_in = t(prmtr_in)
trans(prmtr_in)
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 10000))
# Returns paramter estimates, -LL value, code
toc()
model$hessian
model$invhessian
# Returns paramter estimates, -LL value, code
# Final parameter values
prm_fnl = t(trans(model$par))
model$par
prm_fnl
# Use Hessian to find parameter standard errors
hessn0 = model$hessian
cov0 = solve(hessn0)
grdn_fnl = jacobian(trans, model$par) #trans function used here
cov = grdn_fnl%*%cov0%*%t(grdn_fnl)
sd_fnl = sqrt(abs(diag(cov)))
sd_out = sqrt(abs(diag(cov0)))
# Create output file to store results
results = file("results.txt")
# Final Output
writeLines(c("Likelihood value is ", -model$value,
"code ", model$convergence, ":", model$message, "",
"Estimated parameters are:", c(t(prm_fnl),t(sd_fnl)), "",
"Pre-transformed estimates are:", model$par,"",
"Starting values:", prmtr_in), results)
close(results)
source("lik_fcn.R") # Negative log likelihood function
prmtr_in = c(0.648753,
0.965327,
0.460498,
-0.312246,
0.168139,
-0.784462,
0.812616,
0.759307,
0.635521,
-0.478544,
0.188713,
-0.954975,
-0.149481,
-0.374562,
-0.677031,
-0.642468 )
#prmtr_in = runif(16, min=-1, max=1)
prmtr_in = t(prmtr_in)
trans(prmtr_in)
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 10000))
# Returns paramter estimates, -LL value, code
toc()
model$value
model$hessian
model$invhessian
# Returns paramter estimates, -LL value, code
# Final parameter values
prm_fnl = t(trans(model$par))
model$par
prm_fnl
# Use Hessian to find parameter standard errors
hessn0 = model$hessian
cov0 = solve(hessn0)
grdn_fnl = jacobian(trans, model$par) #trans function used here
cov = grdn_fnl%*%cov0%*%t(grdn_fnl)
sd_fnl = sqrt(abs(diag(cov)))
sd_out = sqrt(abs(diag(cov0)))
# Create output file to store results
results = file("results.txt")
# Final Output
writeLines(c("Likelihood value is ", -model$value,
"code ", model$convergence, ":", model$message, "",
"Estimated parameters are:", c(t(prm_fnl),t(sd_fnl)), "",
"Pre-transformed estimates are:", model$par,"",
"Starting values:", prmtr_in), results)
close(results)
# Final Output
writeLines(c("Likelihood value is ", -model$value, "",
"code ", model$convergence, model$message, "",
"Estimated parameters are:", c(t(prm_fnl),t(sd_fnl)), "",
"Pre-transformed estimates are:", model$par,"",
"Starting values:", prmtr_in), results)
prmtr = trans(prmtr_in)
phi_h11 = prmtr[1]
phi_h12 = prmtr[2]
phi_h21 = prmtr[3]
phi_h22 = prmtr[4]
phi_c11 = prmtr[5]
phi_c12 = prmtr[6]
phi_c21 = prmtr[7]
phi_c22 = prmtr[8]
mu_h = prmtr[9]
mu_c = prmtr[10]
sig_nhh = prmtr[11]^2 # s.e. of HP permanent component
sig_ncc = prmtr[12]^2 # s.e. of credit permanent component
sig_ehh = prmtr[13]^2 # s.e. of the HP AR component
sig_ecc = prmtr[14]^2 # s.e. of the credit AR component
sig_nhnc = prmtr[15]*sqrt(sig_nhh*sig_ncc)
sig_ehec = prmtr[16]*sqrt(sig_ehh*sig_ecc)
F = matrix(0,6,6) # Transition matrix
F[1,] = c(1,0,0,0,0,0)
F[2,] = c(0,phi_h11,phi_h12,0,phi_h21,phi_h22)
F[3,] = c(0,1,0,0,0,0)
F[4,] = c(0,0,0,1,0,0)
F[5,] = c(0,phi_c11,phi_c12,0,phi_c21, phi_c22)
F[6,] = c(0,0,0,0,1,0)
Fstar = F[-c(1, 4), -c(1,4)]
muvec = matrix(c(mu_h,0,0,mu_c,0,0),6,1) # Drift vector
H = matrix(0,2,6)
H[1,] = c(1,1,0,0,0,0)
H[2,] = c(0,0,0,1,1,0)
Q = matrix(0,6,6) # Cov matrix
Q[1,] = c(sig_nhh,0,0,sig_nhnc,0,0)
Q[2,] = c(0, sig_ehh, 0, 0, sig_ehec, 0)
Q[4,] = c(sig_nhnc, 0, 0, sig_ncc, 0, 0)
Q[5,] = c(0, sig_ehec, 0, 0, sig_ecc, 0)
Qstar = Q[-c(1,4), -c(1,4)]
A = matrix(c(0,0),2,1)
beta_ll = matrix(c(t_h_prior,0,0,t_c_prior ,0,0),6,1)
# Starting values, need to adjust, these are random numbers, need to find proper prior
vecQstar = matrix(Qstar,ncol = 1)
vecP_ll = solve(diag(16) - Fstar%x%Fstar)%*%vecQstar
#b is unit matrix if not specified ( solve(a,b) is find a*x =b)
#solve() is used to produce invert of a variable
# Var matrix of initial state vector
P_ll = matrix(0,6,6)
P_ll[1,] = c(100,0,0,50,0,0)
P_ll[2,] = c(0,vecP_ll[1,1],0,0,vecP_ll[3,1],0)
P_ll[4,] = c(70,0,0,200,0,0)
P_ll[5,] = c(0,vecP_ll[9,1],0,0,vecP_ll[11,1],0)
lik_mat = matrix(0,T,1)
P_ll
install.packages("matrixcalc")
