function y = stirlerr(n)
 2%STIRLERR Computes  log(n!) - log( sqrt(2*pi*n)*(n/exp(1))^n )
 3%
 4%  CALL stirlerr(n)
 5%
 6% STIRLERR computes the error of the Stirling approximation, i.e.,
 7%  log(n!) - log( sqrt(2*pi*n)*(n/exp(1))^n
 8%
 9% See also binom, pdfbin, pdfpois
10
11
12% Reference
13% Catherine Loader (2000). 
14% "Fast and Accurate Computation of Binomial Probabilities"; 
15% http://www.herine.net/stat/software/dbinom.html.
16% @misc{ july-fast,
17%   author = "Catherine Loader July",
18%   title = "Fast and Accurate Computation of Binomial Probabilities",
19%   url = "citeseer.ist.psu.edu/312695.html" }
20
21
22S0 = 0.083333333333333333333; % /* 1/12 */
23S1 = 0.00277777777777777777778;% /* 1/360 */
24S2 = 0.00079365079365079365079365;% /* 1/1260 */
25S3 = 0.000595238095238095238095238;% /* 1/1680 */
26S4 = 0.0008417508417508417508417508;% /* 1/1188 */
27
28% sfe=[0, 0.081061466795327258219670264,...
29% 0.041340695955409294093822081, 0.0276779256849983391487892927,...
30% 0.020790672103765093111522771, 0.0166446911898211921631948653,...
31% 0.013876128823070747998745727, 0.0118967099458917700950557241,...
32% 0.010411265261972096497478567, 0.0092554621827127329177286366,...
33% 0.008330563433362871256469318, 0.0075736754879518407949720242,...
34% 0.006942840107209529865664152, 0.0064089941880042070684396310,...
35% 0.005951370112758847735624416, 0.0055547335519628013710386899];
36
37%y = n;
38%nL16    = n<16;
39%y(nL16) = sfe(floor(n(nL16))+1);
40y = gammaln(n+1) - log( sqrt(2*pi.*n).*(n./exp(1)).^n );
41
42
43nn = double(n);
44nn = nn.*nn;
45
46n500    = 500<n;
47y(n500) = (S0-S1./nn(n500))./n(n500);
48n80     = 80<n & n<=500;
49y(n80)  = (S0-(S1-S2./nn(n80))./nn(n80))./n(n80);
50n35     = 35< n & n<=80;
51if any(n35)
52  nn35   = nn(n35);
53  y(n35) = (S0-(S1-(S2-S3./nn35)./nn35)./nn35)./n(n35);
54end
55n15      = 15< n & n<=35;
56if any(n15)
57  nn15   = nn(n15);
58  y(n15) = (S0-(S1-(S2-(S3-S4./nn15)./nn15)./nn15)./nn15)./n(n15);
59end