model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 3000))
# Returns paramter estimates, -LL value, code
toc()
print(paste("Number of loop: ", number))
number = number + 1
det(model$hessian)
}
while (is.nan(det(model$hessian))==TRUE)
{
#Setting priors
sig_ty_prior = as.numeric(100+sample(1:100, 1))
sig_gy_prior = as.numeric(100+sample(1:100, 1))
sig_th_prior = as.numeric(100+sample(1:100, 1))
sig_gh_prior = as.numeric(100+sample(1:100, 1))
#sig_tyth_prior = as.numeric(100+sample(1:100, 1))
#randomize cross trend covariance to be large positive or negative number.
m = sample(1:2,1)-1
if (m == 0) {m = -1}
sig_tyth_prior = as.numeric(m*(50+sample(1:50, 1)))
prior = c(t_y_prior, t_h_prior, sig_ty_prior, sig_gy_prior, sig_th_prior, sig_gh_prior, sig_tyth_prior)
prmtr_in = runif(12, min=-20, max=20)
# det_ft = prior_setting(prmtr_in,prior)
# det_ft
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 3000))
# Returns paramter estimates, -LL value, code
toc()
print(paste("Number of loop: ", number))
number = number + 1
det(model$hessian)
}
model$hessian
solve(model$hessian)
str(solve(model$hessian))
class(solve(model$hessian))
try(solve(model$hessian))
try(solve(model$hessian),TRUE)
mod = try(solve(model$hessian),TRUE)
mod
class(mod)
while (isTRUE(class(try(solve(model$hessian)))=="try-error")==TRUE)
{
#Setting priors
sig_ty_prior = as.numeric(100+sample(1:100, 1))
sig_gy_prior = as.numeric(100+sample(1:100, 1))
sig_th_prior = as.numeric(100+sample(1:100, 1))
sig_gh_prior = as.numeric(100+sample(1:100, 1))
#sig_tyth_prior = as.numeric(100+sample(1:100, 1))
#randomize cross trend covariance to be large positive or negative number.
m = sample(1:2,1)-1
if (m == 0) {m = -1}
sig_tyth_prior = as.numeric(m*(50+sample(1:50, 1)))
prior = c(t_y_prior, t_h_prior, sig_ty_prior, sig_gy_prior, sig_th_prior, sig_gh_prior, sig_tyth_prior)
prmtr_in = runif(12, min=-20, max=20)
# det_ft = prior_setting(prmtr_in,prior)
# det_ft
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 3000))
# Returns paramter estimates, -LL value, code
toc()
print(paste("Number of loop: ", number))
number = number + 1
det(model$hessian)
}
model$hessian
solve(model$hessian)
number = 1
while (isTRUE(class(try(solve(model$hessian)))=="try-error")==TRUE)
{
#Setting priors
sig_ty_prior = as.numeric(100+sample(1:100, 1))
sig_gy_prior = as.numeric(100+sample(1:100, 1))
sig_th_prior = as.numeric(100+sample(1:100, 1))
sig_gh_prior = as.numeric(100+sample(1:100, 1))
#sig_tyth_prior = as.numeric(100+sample(1:100, 1))
#randomize cross trend covariance to be large positive or negative number.
m = sample(1:2,1)-1
if (m == 0) {m = -1}
sig_tyth_prior = as.numeric(m*(50+sample(1:50, 1)))
prior = c(t_y_prior, t_h_prior, sig_ty_prior, sig_gy_prior, sig_th_prior, sig_gh_prior, sig_tyth_prior)
prmtr_in = runif(12, min=-20, max=20)
# det_ft = prior_setting(prmtr_in,prior)
# det_ft
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 3000))
# Returns paramter estimates, -LL value, code
toc()
print(paste("Number of loop: ", number))
number = number + 1
}
while (isTRUE(class(try(solve(model$hessian)))=="try-error"))
{
#Setting priors
sig_ty_prior = as.numeric(100+sample(1:100, 1))
sig_gy_prior = as.numeric(100+sample(1:100, 1))
sig_th_prior = as.numeric(100+sample(1:100, 1))
sig_gh_prior = as.numeric(100+sample(1:100, 1))
#sig_tyth_prior = as.numeric(100+sample(1:100, 1))
#randomize cross trend covariance to be large positive or negative number.
m = sample(1:2,1)-1
if (m == 0) {m = -1}
sig_tyth_prior = as.numeric(m*(50+sample(1:50, 1)))
prior = c(t_y_prior, t_h_prior, sig_ty_prior, sig_gy_prior, sig_th_prior, sig_gh_prior, sig_tyth_prior)
prmtr_in = runif(12, min=-20, max=20)
# det_ft = prior_setting(prmtr_in,prior)
# det_ft
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 3000))
# Returns paramter estimates, -LL value, code
toc()
print(paste("Number of loop: ", number))
number = number + 1
}
class(try(solve(model$hessian)))
try(solve(model$hessian))
mod = try(solve(model$hessian))
mod
class(mod)
while (isTRUE(class(try(solve(model$hessian)),TRUE)=="try-error"))
{
#Setting priors
sig_ty_prior = as.numeric(100+sample(1:100, 1))
sig_gy_prior = as.numeric(100+sample(1:100, 1))
sig_th_prior = as.numeric(100+sample(1:100, 1))
sig_gh_prior = as.numeric(100+sample(1:100, 1))
#sig_tyth_prior = as.numeric(100+sample(1:100, 1))
#randomize cross trend covariance to be large positive or negative number.
m = sample(1:2,1)-1
if (m == 0) {m = -1}
sig_tyth_prior = as.numeric(m*(50+sample(1:50, 1)))
prior = c(t_y_prior, t_h_prior, sig_ty_prior, sig_gy_prior, sig_th_prior, sig_gh_prior, sig_tyth_prior)
prmtr_in = runif(12, min=-20, max=20)
# det_ft = prior_setting(prmtr_in,prior)
# det_ft
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 3000))
# Returns paramter estimates, -LL value, code
toc()
print(paste("Number of loop: ", number))
number = number + 1
}
while (isTRUE(class(try(solve(model$hessian),TRUE))=="try-error"))
{
#Setting priors
sig_ty_prior = as.numeric(100+sample(1:100, 1))
sig_gy_prior = as.numeric(100+sample(1:100, 1))
sig_th_prior = as.numeric(100+sample(1:100, 1))
sig_gh_prior = as.numeric(100+sample(1:100, 1))
#sig_tyth_prior = as.numeric(100+sample(1:100, 1))
#randomize cross trend covariance to be large positive or negative number.
m = sample(1:2,1)-1
if (m == 0) {m = -1}
sig_tyth_prior = as.numeric(m*(50+sample(1:50, 1)))
prior = c(t_y_prior, t_h_prior, sig_ty_prior, sig_gy_prior, sig_th_prior, sig_gh_prior, sig_tyth_prior)
prmtr_in = runif(12, min=-20, max=20)
# det_ft = prior_setting(prmtr_in,prior)
# det_ft
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 3000))
# Returns paramter estimates, -LL value, code
toc()
print(paste("Number of loop: ", number))
number = number + 1
}
class(try(solve(model$hessian),TRUE)
class(try(solve(model$hessian),TRUE))
try(solve(model$hessian),TRUE)
mod = try(solve(model$hessian),TRUE)
> mod
mod = try(solve(model$hessian),TRUE)
mod
mod = try(solve(model$hessian),TRUE)
mod = try(solve(model$hessian),TRUE)
class(mod)
try(solve(model$hessian),TRUE)
mod1=try(solve(model$hessian),TRUE)
class(mod1)
?try
print(try(log("a"), TRUE))
try(log("a"), TRUE)
class(try(log("a"), TRUE))
class(try(solve(model$hessian),TRUE))
class(try(solve(model$hessian)),TRUE)
class(try(solve(model$hessian), TRUE))
class(try(log("a"), TRUE))
solve(model$hessian)
try(solve(model$hessian))
det(model$hessian)
number = 1
while (is.nan(det(model$hessian))==TRUE)
{
#Setting priors
sig_ty_prior = as.numeric(100+sample(1:100, 1))
sig_gy_prior = as.numeric(100+sample(1:100, 1))
sig_th_prior = as.numeric(100+sample(1:100, 1))
sig_gh_prior = as.numeric(100+sample(1:100, 1))
#sig_tyth_prior = as.numeric(100+sample(1:100, 1))
#randomize cross trend covariance to be large positive or negative number.
m = sample(1:2,1)-1
if (m == 0) {m = -1}
sig_tyth_prior = as.numeric(m*(50+sample(1:50, 1)))
prior = c(t_y_prior, t_h_prior, sig_ty_prior, sig_gy_prior, sig_th_prior, sig_gh_prior, sig_tyth_prior)
prmtr_in = runif(12, min=-20, max=20)
# det_ft = prior_setting(prmtr_in,prior)
# det_ft
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 3000))
# Returns paramter estimates, -LL value, code
toc()
print(paste("Number of loop: ", number))
number = number + 1
}
while (is.nan(det(model$hessian))==TRUE)
{
#Setting priors
sig_ty_prior = as.numeric(100+sample(1:100, 1))
sig_gy_prior = as.numeric(100+sample(1:100, 1))
sig_th_prior = as.numeric(100+sample(1:100, 1))
sig_gh_prior = as.numeric(100+sample(1:100, 1))
#sig_tyth_prior = as.numeric(100+sample(1:100, 1))
#randomize cross trend covariance to be large positive or negative number.
m = sample(1:2,1)-1
if (m == 0) {m = -1}
sig_tyth_prior = as.numeric(m*(50+sample(1:50, 1)))
prior = c(t_y_prior, t_h_prior, sig_ty_prior, sig_gy_prior, sig_th_prior, sig_gh_prior, sig_tyth_prior)
prmtr_in = runif(12, min=-20, max=20)
# det_ft = prior_setting(prmtr_in,prior)
# det_ft
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 3000))
# Returns paramter estimates, -LL value, code
toc()
print(paste("Number of loops: ", number))
number = number + 1
}
number = 1
while (is.nan(det(model$hessian))==TRUE)
{
#Setting priors
sig_ty_prior = as.numeric(100+sample(1:100, 1))
sig_gy_prior = as.numeric(100+sample(1:100, 1))
sig_th_prior = as.numeric(100+sample(1:100, 1))
sig_gh_prior = as.numeric(100+sample(1:100, 1))
#sig_tyth_prior = as.numeric(100+sample(1:100, 1))
#randomize cross trend covariance to be large positive or negative number.
m = sample(1:2,1)-1
if (m == 0) {m = -1}
sig_tyth_prior = as.numeric(m*(50+sample(1:50, 1)))
prior = c(t_y_prior, t_h_prior, sig_ty_prior, sig_gy_prior, sig_th_prior, sig_gh_prior, sig_tyth_prior)
prmtr_in = runif(12, min=-20, max=20)
# det_ft = prior_setting(prmtr_in,prior)
# det_ft
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 3000))
# Returns paramter estimates, -LL value, code
toc()
print(paste("Number of loops: ", number))
number = number + 1
}
mod=try(solve(model$hessian),TRUE)
class(mod)
model$hessian
number = 1
while (is.nan(det(model$hessian))==TRUE)
{
#Setting priors
sig_ty_prior = as.numeric(100+sample(1:100, 1))
sig_gy_prior = as.numeric(100+sample(1:100, 1))
sig_th_prior = as.numeric(100+sample(1:100, 1))
sig_gh_prior = as.numeric(100+sample(1:100, 1))
#sig_tyth_prior = as.numeric(100+sample(1:100, 1))
#randomize cross trend covariance to be large positive or negative number.
m = sample(1:2,1)-1
if (m == 0) {m = -1}
sig_tyth_prior = as.numeric(m*(50+sample(1:50, 1)))
prior = c(t_y_prior, t_h_prior, sig_ty_prior, sig_gy_prior, sig_th_prior, sig_gh_prior, sig_tyth_prior)
prmtr_in = runif(12, min=-20, max=20)
# det_ft = prior_setting(prmtr_in,prior)
# det_ft
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 3000))
# Returns paramter estimates, -LL value, code
toc()
print(paste("Number of loops: ", number))
number = number + 1
}
model$hessian
solve(model$hessian)
# Final parameter values
prm_fnl = t(trans(model$par))
model$par
prm_fnl
# Use Hessian to find parameter standard errors
hessn0 = model$hessian
cov0 = solve(hessn0)
grdn_fnl = jacobian(trans, model$par) #trans function used here
cov = grdn_fnl%*%cov0%*%t(grdn_fnl)
sd_fnl = sqrt(abs(diag(cov)))
sd_out = sqrt(abs(diag(cov0)))
# Create output file to store results
setwd("../Output")
result_filepath = sprintf("R_result_%s.txt",country)
results = file(result_filepath)
# Final Output
writeLines(c("Likelihood value is ", -model$value,
"code ", model$convergence, "",
"Estimated parameters are:", c(t(prm_fnl),t(sd_fnl)), "",
"Pre-transformed estimates are:", model$par,"",
"Starting values:", prmtr_in,"",
"Staring priors:", prior,""), results)
close(results)
setwd("../R")
#export priors and starting values
write.table(prmtr_in,sprintf("../Data/R_prmtr_in_%s.txt",country),col.names = FALSE, row.names = FALSE)
write.table(prior,sprintf("../Data/R_prior_%s.txt",country),col.names = FALSE, row.names = FALSE)
#write regression results to csv
reg = cbind(t(prm_fnl),matrix(sd_fnl,12,1))
reg = rbind(reg,c(-model$value,0))
write.table(reg,sprintf("../Output/Reg_%s.csv",country),col.names = FALSE, row.names = FALSE)
#=========================================================================#
# Impulse Response Functions
#=========================================================================#
filter_out = filter_fcn(model$par)
data = filter_out[[1]]
forcst = filter_out[[2]]
# Creates output file to store filtered dataset
write.table(cbind(data[,1],data[,3],data[,4],data[,6],forcst[,1:2]),sprintf("../Data/uc_yc_%s.txt",country),sep=',',row.names = FALSE,col.names = FALSE)
#
# df1 <- read.table( sprintf("../Output/Reg_%s.csv",country) , header=FALSE, sep=",")
# prm_fnl = df1[,1]
phi_y1 = prm_fnl[1]
phi_yh = prm_fnl[3]
phi_h1 = prm_fnl[4]
phi_hy = prm_fnl[6]
irf_fnl = c()
irf = 1
psi_ll = 0
psi_l = 1
for(j in 1:40){
psi_t = phi_y1*psi_l + phi_yh*psi_l
irf = rbind(irf,psi_t)
psi_ll = psi_l
psi_l = psi_t
}
irf_fnl = cbind(irf_fnl,irf)
irf = 1
psi_ll = 0
psi_l = 1
for(j in 1:40){
psi_t = phi_h1*psi_l + phi_hy*psi_l
irf = rbind(irf,psi_t)
psi_ll = psi_l
psi_l = psi_t
}
irf_fnl = cbind(irf_fnl,irf)
hlp = 0.5*matrix(1,nrow(irf_fnl),1) # Half Lives
hlm = -0.5*matrix(1,nrow(irf_fnl),1)
irf_vec = seq(from = 1,to = nrow(irf_fnl))
par(mar=c(1,1,1,1))
pdf(file= sprintf("../Output/Graphs/IRF_%s.pdf",country) )
par(mfrow=c(2,1))
# Plot income impulse response functions
plot(irf_vec,irf_fnl[,1],type = "l", main = "Credit IRF",
xlab = "Quarter",ylab = "",lty = 1)
lines(irf_vec,hlp,lty = 2)
lines(irf_vec,matrix(0,nrow(irf_fnl)),lty = 3)
lines(irf_vec,hlm,lty = 4)
# Plot consumption impulse response functions
plot(irf_vec,irf_fnl[,2],type = "l", main = "Housing Price IRF",
xlab = "Quarter",ylab = "",lty = 1)
lines(irf_vec,hlp,lty = 2)
lines(irf_vec,matrix(0,nrow(irf_fnl)),lty = 3)
lines(irf_vec,hlm,lty = 4)
dev.off()
number = 1
while (is.nan(det(model$hessian))==TRUE)
{
#Setting priors
sig_ty_prior = as.numeric(100+sample(1:100, 1))
sig_gy_prior = as.numeric(sample(1:10, 1))
sig_th_prior = as.numeric(100+sample(1:100, 1))
sig_gh_prior = as.numeric(sample(1:10, 1))
sig_tyth_prior = as.numeric(sample(1:10, 1))
#randomize cross trend covariance to be large positive or negative number.
# m = sample(1:2,1)-1
# if (m == 0) {m = -1}
# sig_tyth_prior = as.numeric(m*(50+sample(1:50, 1)))
prior = c(t_y_prior, t_h_prior, sig_ty_prior, sig_gy_prior, sig_th_prior, sig_gh_prior, sig_tyth_prior)
prmtr_in = runif(12, min=-20, max=20)
# det_ft = prior_setting(prmtr_in,prior)
# det_ft
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 3000))
# Returns paramter estimates, -LL value, code
toc()
number = 1
while (is.nan(det(model$hessian))==TRUE)
{
#Setting priors
sig_ty_prior = as.numeric(100+sample(1:100, 1))
sig_gy_prior = as.numeric(sample(1:10, 1))
sig_th_prior = as.numeric(100+sample(1:100, 1))
sig_gh_prior = as.numeric(sample(1:10, 1))
sig_tyth_prior = as.numeric(sample(1:10, 1))
#randomize cross trend covariance to be large positive or negative number.
# m = sample(1:2,1)-1
# if (m == 0) {m = -1}
# sig_tyth_prior = as.numeric(m*(50+sample(1:50, 1)))
prior = c(t_y_prior, t_h_prior, sig_ty_prior, sig_gy_prior, sig_th_prior, sig_gh_prior, sig_tyth_prior)
prmtr_in = runif(12, min=-20, max=20)
# det_ft = prior_setting(prmtr_in,prior)
# det_ft
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 3000))
# Returns paramter estimates, -LL value, code
toc()
print(paste("Number of loops: ", number))
number = number + 1
}
number = 1
while (is.nan(det(model$hessian))==TRUE)
{
#Setting priors
sig_ty_prior = as.numeric(100+sample(1:100, 1))
sig_gy_prior = as.numeric(sample(1:10, 1))
sig_th_prior = as.numeric(100+sample(1:100, 1))
sig_gh_prior = as.numeric(sample(1:10, 1))
sig_tyth_prior = as.numeric(sample(1:10, 1))
#randomize cross trend covariance to be large positive or negative number.
# m = sample(1:2,1)-1
# if (m == 0) {m = -1}
# sig_tyth_prior = as.numeric(m*(50+sample(1:50, 1)))
prior = c(t_y_prior, t_h_prior, sig_ty_prior, sig_gy_prior, sig_th_prior, sig_gh_prior, sig_tyth_prior)
prmtr_in = runif(12, min=-20, max=20)
# det_ft = prior_setting(prmtr_in,prior)
# det_ft
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 3000))
# Returns paramter estimates, -LL value, code
toc()
print(paste("Number of loops: ", number))
number = number + 1
}
sig_ty_prior = as.numeric(100+sample(1:100, 1))
sig_gy_prior = as.numeric(sample(1:10, 1))
sig_th_prior = as.numeric(100+sample(1:100, 1))
sig_gh_prior = as.numeric(sample(1:10, 1))
sig_tyth_prior = as.numeric(sample(1:10, 1))
prior = c(t_y_prior, t_h_prior, sig_ty_prior, sig_gy_prior, sig_th_prior, sig_gh_prior, sig_tyth_prior)
prmtr_in = runif(12, min=-20, max=20)
# det_ft = prior_setting(prmtr_in,prior)
# det_ft
tic("ucminf")
# Initial paramter values
model = ucminf(prmtr_in,lik_fcn,hessian = TRUE,control = list(maxeval = 3000))
# Returns paramter estimates, -LL value, code
toc()
print("hello")
2+2
#Load libraries
rm(list = ls())
library(tidyverse)
library(tictoc)
library(ucminf)
library(numDeriv)
library(Matrix)
#library(matrixcalc)
source("trans.R") # Parameter constraints
source("lik_fcn.R") # Negative log likelihood function
source("filter_fcn.R") # Filter function
source("prior_setting.R") #Setting prior for positive definite covar matrix
# Replicates Table 3 from Morley, 2007 JMCB
#
#
# setwd("put working directory here")
setwd("D:/GitHub/HPCredit/Regression/Ver 2 - UC with random walk drift term/R")
country = 'DE'
#automate file name  sprintf("input%s.txt",country)
#Read raw data
data_filepath = sprintf("../Data/Input/data_%s.txt",country)
data <- read.table(data_filepath, header=TRUE, sep=",")
data = na.omit(data)
y <- 100*log(data)
START <- 2
#=========================================================================#
# Maximum Likelihood Estimation
#=========================================================================#
# Initial values for optimisation routine
# prmtr_in = c(-3.08,-24.92,-0.011,0.24649,
#              -0.2259,0.53124,1.98897,-3.2913,
#              0.0028,0.0005,
#              -1.236,0.8003,8.4251,4.6742,
#              -1.052,0.84236)
t_y_prior = y[1,1]
t_h_prior = y[1,2]
y=y[-1,]
T <- nrow(y)
#Loop for setting prior that yield invertible hessian
2+2
